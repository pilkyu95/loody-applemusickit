{"version":3,"file":"plugin-async-loader.js","names":["_debug","_interopRequireDefault","require","_fs","_path","_utils","e","__esModule","default","debug","buildDebug","lstat","fs","promises","isDirectory","pathFolder","stat","asyncLoadPlugin","pluginConfigs","pluginOptions","sanityCheck","prefix","pluginCategory","logger","pluginsIds","Object","keys","config","plugins","pluginId","pluginsPath","isAbsolute","config_path","configPath","error","resolve","join","dirname","path","pluginDir","externalFilePlugin","plugin","tryLoad","a","b","isValid","executePlugin","content","push","info","err","warn","message","isScoped","startsWith","includes","pluginName","length","pluginConfig","isES6"],"sources":["../src/plugin-async-loader.ts"],"sourcesContent":["import buildDebug from 'debug';\nimport fs from 'fs';\nimport { dirname, isAbsolute, join, resolve } from 'path';\n\nimport { pluginUtils } from '@verdaccio/core';\n\nimport { PluginType, isES6, isValid, tryLoad } from './utils';\n\nconst debug = buildDebug('verdaccio:plugin:loader:async');\n\nconst { lstat } = fs.promises ? fs.promises : require('fs/promises');\n\nasync function isDirectory(pathFolder: string) {\n  const stat = await lstat(pathFolder);\n  return stat.isDirectory();\n}\n\n// type Plugins<T> =\n//   | pluginUtils.Auth<T>\n//   | pluginUtils.Storage<T>\n//   | pluginUtils.ExpressMiddleware<T, unknown, unknown>;\n\n/**\n * The plugin loader find recursively plugins, if one plugin fails is ignored and report the error to the logger.\n *\n * The loader follows the order:\n * - If the at the `config.yaml` file the  `plugins: ./plugins` is defined\n *   - If is absolute will use the provided path\n *   - If is relative, will use the base path of the config file. eg: /root/config.yaml the plugins folder should be\n *     hosted at /root/plugins\n * - The next step is find at the node_modules or global based on the `require` native algorithm.\n * - If the package is scoped eg: @scope/foo, try to load the package `@scope/foo`\n * - If the package is not scoped, will use the default prefix: verdaccio-foo.\n * - If a custom prefix is provided, the verdaccio- is replaced by the config.server.pluginPrefix.\n *\n * The `sanityCheck` is the validation for the required methods to load the plugin, if the validation fails the plugin won't be loaded.\n * The `params` is an object that contains the global configuration and the logger.\n *\n * @param {*} pluginConfigs the custom plugin section\n * @param {*} pluginOptions a set of options to initialize the plugin\n * @param {*} sanityCheck callback that check the shape that should fulfill the plugin\n * @param {*} prefix by default is verdaccio but can be override with config.server.pluginPrefix\n * @param {*} pluginCategory the category of the plugin, eg: auth, storage, middleware\n * @return {Array} list of plugins\n */\nexport async function asyncLoadPlugin<T extends pluginUtils.Plugin<T>>(\n  pluginConfigs: any = {},\n  pluginOptions: pluginUtils.PluginOptions,\n  sanityCheck: (plugin: PluginType<T>) => boolean,\n  prefix: string = 'verdaccio',\n  pluginCategory: string = ''\n): Promise<PluginType<T>[]> {\n  const logger = pluginOptions?.logger;\n  const pluginsIds = Object.keys(pluginConfigs);\n  const { config } = pluginOptions;\n  let plugins: PluginType<T>[] = [];\n  for (let pluginId of pluginsIds) {\n    debug('looking for plugin %o', pluginId);\n    if (typeof config.plugins === 'string') {\n      let pluginsPath = config.plugins;\n      debug('plugin path %s', pluginsPath);\n      if (!isAbsolute(pluginsPath)) {\n        if (typeof config.config_path === 'string' && !config.configPath) {\n          logger.error(\n            'configPath is missing and the legacy config.config_path is not available for loading plugins'\n          );\n        }\n\n        if (!config.configPath) {\n          logger.error('config path property is required for loading plugins');\n          continue;\n        }\n        pluginsPath = resolve(join(dirname(config.configPath), pluginsPath));\n      }\n      logger.debug({ path: pluginsPath }, 'plugins folder defined, loading plugins from @{path} ');\n      // throws if is not a directory\n      try {\n        await isDirectory(pluginsPath);\n        const pluginDir = pluginsPath;\n        const externalFilePlugin = resolve(pluginDir, `${prefix}-${pluginId}`);\n        let plugin = tryLoad<T>(externalFilePlugin, (a: any, b: any) => {\n          logger.error(a, b);\n        });\n        if (plugin && isValid(plugin)) {\n          plugin = executePlugin(plugin, pluginConfigs[pluginId], pluginOptions);\n          if (!sanityCheck(plugin)) {\n            logger.error(\n              { content: externalFilePlugin },\n              \"@{content} doesn't look like a valid plugin\"\n            );\n            continue;\n          }\n          plugins.push(plugin);\n          logger.info(\n            { prefix, pluginId, pluginCategory },\n            'plugin @{prefix}-@{pluginId} successfully loaded (@{pluginCategory})'\n          );\n          continue;\n        }\n      } catch (err: any) {\n        logger.warn(\n          { err: err.message, pluginsPath, pluginId },\n          '@{err} on loading plugins at @{pluginsPath} for @{pluginId}'\n        );\n      }\n    }\n\n    if (typeof pluginId === 'string') {\n      const isScoped: boolean = pluginId.startsWith('@') && pluginId.includes('/');\n      debug('is scoped plugin: %s', isScoped);\n      const pluginName = isScoped ? pluginId : `${prefix}-${pluginId}`;\n      debug('plugin package name %s', pluginName);\n      let plugin = tryLoad<T>(pluginName, (a: any, b: any) => {\n        logger.error(a, b);\n      });\n      if (plugin && isValid(plugin)) {\n        plugin = executePlugin(plugin, pluginConfigs[pluginId], pluginOptions);\n        if (!sanityCheck(plugin)) {\n          logger.error({ content: pluginName }, \"@{content} doesn't look like a valid plugin\");\n          continue;\n        }\n        plugins.push(plugin);\n        logger.info(\n          { prefix, pluginId, pluginCategory },\n          'plugin @{prefix}-@{pluginId} successfully loaded (@{pluginCategory})'\n        );\n        continue;\n      } else {\n        logger.error(\n          { pluginName },\n          'package not found, try to install @{pluginName} with a package manager'\n        );\n        continue;\n      }\n    }\n  }\n  debug('%s plugins found: %s', pluginCategory, plugins.length);\n  return plugins;\n}\n\nexport function executePlugin<T>(\n  plugin: PluginType<T>,\n  pluginConfig: unknown,\n  pluginOptions: pluginUtils.PluginOptions\n): PluginType<T> {\n  if (isES6(plugin)) {\n    debug('plugin is ES6');\n    // @ts-expect-error no relevant for the code\n    // eslint-disable-next-line new-cap\n    return new plugin.default(pluginConfig, pluginOptions) as Plugin;\n  } else {\n    debug('plugin is commonJS');\n    // @ts-expect-error improve this type\n    return plugin(pluginConfig, pluginOptions) as PluginType<T>;\n  }\n}\n"],"mappings":"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","ignoreList":[]}