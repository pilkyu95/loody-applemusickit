{"version":3,"file":"crypt3.js","names":["_unixCryptTdJs","_interopRequireDefault","require","_cryptoUtils","e","__esModule","default","EncryptionMethod","exports","createSalt","type","crypt","randomBytes","toString","md5","blowfish","sha256","sha512","TypeError","crypt3","key","salt"],"sources":["../src/crypt3.ts"],"sourcesContent":["import crypt from 'unix-crypt-td-js';\n\nimport { randomBytes } from './crypto-utils';\n\nexport enum EncryptionMethod {\n  md5 = 'md5',\n  sha1 = 'sha1',\n  crypt = 'crypt',\n  blowfish = 'blowfish',\n  sha256 = 'sha256',\n  sha512 = 'sha512',\n}\n\n/**\n * Create salt\n * @param {EncryptionMethod} type The type of salt: md5, blowfish (only some linux\n * distros), sha256 or sha512. Default is sha512.\n * @returns {string} Generated salt string\n */\nexport function createSalt(type: EncryptionMethod = EncryptionMethod.crypt): string {\n  switch (type) {\n    case EncryptionMethod.crypt:\n      // Legacy crypt salt with no prefix (only the first 2 bytes will be used).\n      return randomBytes(2).toString('base64');\n\n    case EncryptionMethod.md5:\n      return '$1$' + randomBytes(10).toString('base64');\n\n    case EncryptionMethod.blowfish:\n      return '$2a$' + randomBytes(10).toString('base64');\n\n    case EncryptionMethod.sha256:\n      return '$5$' + randomBytes(10).toString('base64');\n\n    case EncryptionMethod.sha512:\n      return '$6$' + randomBytes(10).toString('base64');\n\n    default:\n      throw new TypeError(`Unknown salt type at crypt3.createSalt: ${type}`);\n  }\n}\n\n/**\n * Crypt(3) password and data encryption.\n * @param {string} key user's typed password\n * @param {string} salt Optional salt, for example SHA-512 use \"$6$salt$\".\n * @returns {string} A generated hash in format $id$salt$encrypted\n * @see https://en.wikipedia.org/wiki/Crypt_(C)\n */\n\nexport default function crypt3(key: string, salt: string = createSalt()): string {\n  return crypt(key, salt);\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAD,OAAA;AAA6C,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAAA,IAEjCG,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAS5B;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,UAAUA,CAACC,IAAsB,GAAGH,gBAAgB,CAACI,KAAK,EAAU;EAClF,QAAQD,IAAI;IACV,KAAKH,gBAAgB,CAACI,KAAK;MACzB;MACA,OAAO,IAAAC,wBAAW,EAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAE1C,KAAKN,gBAAgB,CAACO,GAAG;MACvB,OAAO,KAAK,GAAG,IAAAF,wBAAW,EAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAEnD,KAAKN,gBAAgB,CAACQ,QAAQ;MAC5B,OAAO,MAAM,GAAG,IAAAH,wBAAW,EAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAEpD,KAAKN,gBAAgB,CAACS,MAAM;MAC1B,OAAO,KAAK,GAAG,IAAAJ,wBAAW,EAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAEnD,KAAKN,gBAAgB,CAACU,MAAM;MAC1B,OAAO,KAAK,GAAG,IAAAL,wBAAW,EAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAEnD;MACE,MAAM,IAAIK,SAAS,CAAC,2CAA2CR,IAAI,EAAE,CAAC;EAC1E;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASS,MAAMA,CAACC,GAAW,EAAEC,IAAY,GAAGZ,UAAU,CAAC,CAAC,EAAU;EAC/E,OAAO,IAAAE,sBAAK,EAACS,GAAG,EAAEC,IAAI,CAAC;AACzB","ignoreList":[]}